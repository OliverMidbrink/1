coordinates_list[e[1]]
})
coordinates_list[e[1]]@x
apply(get.edgelist(g), 1, function(e) {
coordinates_list[e[1]]@x
})
coordinates_list[e[1], 1]
apply(get.edgelist(g), 1, function(e) {
coordinates_list[e[1], 1]
})
coordinates_list[e[1],][1]
apply(get.edgelist(g), 1, function(e) {
coordinates_list[e[1],][1]
})
apply(get.edgelist(g), 1, function(e) {
coordinates_list[e[1]][1]
})
View(layout_matrix)
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]] <- c(x = x_mean, y = y_mean)
}
V(g)
coordinates_list[V(g)]
apply(coordinates_list[V(g)], 1. function(e) {
apply(coordinates_list[V(g)], 1, function(e) {
e
})
apply(coordinates_list[V(g)], function(e) {
e
})
apply(coordinates_list[V(g)], 2, function(e) {
e
})
apply(get.edgelist(g), 1, function(e) {
coordinates_list[e[1]][1]
})
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]]@x <- c(x_mean)
coordinates_list[[i]]@y <- c(y_mean)
}
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]]@x <- x_mean
coordinates_list[[i]]@y <- y_mean
}
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]]$x <- x_mean
coordinates_list[[i]]$y <- y_mean
}
# The list now contains the coordinates
coordinates_list
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list$x[[i]] <- x_mean
coordinates_list$y[[i]] <- y_mean
}
# Create an empty list to store the coordinates
coordinates_list <- list()
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list$x[[i]] <- x_mean
coordinates_list$y[[i]] <- y_mean
}
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
plot(coordinates_list, type = "n", xlab = "X Coordinate", ylab = "Y Coordinate")
text(coordinates_list, labels = V(g)$name, col = "blue")
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (i in levels(clustering)) {
text(mean(dimred[clustering == i, 1]), mean(dimred[clustering == i, 2]), labels = i, font = 2)
}
plot.igraph(lineages@metadata$mst, layout=layout_matrix)
layout_matrix <- do.call(rbind, coordinates_list)
plot.igraph(lineages@metadata$mst, layout=layout_matrix)
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]]$x <- x_mean
coordinates_list[[i]]$y <- y_mean
}
# The list now contains the coordinates
coordinates_list
layout_matrix <- do.call(rbind, coordinates_list)
g <- lineages@metadata$mst
plot.igraph(lineages@metadata$mst, layout=layout_matrix)
# Loop over the levels of clustering
for (i in levels(factor(clustering))) {
# Calculate the mean of the first and second dimension where clustering equals the current level
x_mean <- mean(dimred[clustering == i, 1])
y_mean <- mean(dimred[clustering == i, 2])
# Add the means as a named vector to the list
coordinates_list[[i]] <- c(x = x_mean, y = y_mean)
}
# The list now contains the coordinates
coordinates_list
layout_matrix <- do.call(rbind, coordinates_list)
g <- lineages@metadata$mst
plot.igraph(lineages@metadata$mst, layout=layout_matrix)
# The list now contains the coordinates
coordinates_list
layout_matrix <- do.call(rbind, coordinates_list)
g <- lineages@metadata$mst
plot.igraph(lineages@metadata$mst, layout=layout_matrix)
par(mfrow = c(1, 2))
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (i in levels(clustering)) {
text(mean(dimred[clustering == i, 1]), mean(dimred[clustering == i, 2]), labels = i, font = 2)
}
lineages@metadata$lineages
for (lineage in lineages@metadata$lineages){
lineage
}
for (lineage in lineages@metadata$lineages){
print(lineage)
}
print(lineage)[[1]]
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]]
}
print(lineage)[[1]][[1]]
for (lineage in lineages@metadata$lineages){
print(lineage)[[1]][[1]]
}
# Visualize the combined UMAP plot with clusters
DimPlot(dataCombined, reduction = 'umap', group.by = 'seurat_clusters')
par(mfrow = c(1, 2))
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (i in levels(clustering)) {
text(mean(dimred[clustering == i, 1]), mean(dimred[clustering == i, 2]), labels = i, font = 2)
}
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (lineage in lineages@metadata$lineages){
for (element in lineage) {
element
}
}
for (lineage in lineages@metadata$lineages){
for (element in lineage) {
print(element)
}
}
for (lineage in lineages@metadata$lineages){
last_element = NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 1])
segment(x0, y0, x1, y1)
}
}
}
segments(x0, y0, x1, y1)
for (lineage in lineages@metadata$lineages){
last_element = NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 1])
segments(x0, y0, x1, y1)
}
}
}
for (lineage in lineages@metadata$lineages){
last_element = NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 1])
segments(x0, y0, x1, y1, col = "black")
}
}
}
for (lineage in lineages@metadata$lineages){
last_element = NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 1])
segments(x0, y0, x1, y1, col = "black")
}
last_element = element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 1])
segments(x0, y0, x1, y1, col = "black")
}
last_element <- element
}
}
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
lines(x0, y0, x1, y1, col = "black")
}
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
print(element)
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
print(last_element)
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
print(last_element)
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
print(last_element)
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
if (is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
last_element <- element
}
}
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
if (!is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
last_element <- element
}
}
# Visualize the combined UMAP plot with clusters
DimPlot(dataCombined, reduction = 'umap', group.by = 'seurat_clusters')
# Visualize the combined UMAP plot with clusters
DimPlot(dataCombined, reduction = 'umap', group.by = 'seurat_clusters')
par(mfrow = c(1, 2))
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (i in levels(clustering)) {
text(mean(dimred[clustering == i, 1]), mean(dimred[clustering == i, 2]), labels = i, font = 2)
}
plot(dimred[, 1:2], col = pal[clustering], cex = 0.5, pch = 16)
for (lineage in lineages@metadata$lineages){
last_element <- NULL
for (element in lineage) {
if (!is.null(last_element)) {
x0 <- mean(dimred[clustering == element, 1])
y0 <- mean(dimred[clustering == element, 2])
x1 <- mean(dimred[clustering == last_element, 1])
y1 <- mean(dimred[clustering == last_element, 2])
segments(x0, y0, x1, y1, col = "black", lwd = 2)
}
print(element)
last_element <- element
}
}
for (i in levels(clustering)) {
text(mean(dimred[clustering == i, 1]), mean(dimred[clustering == i, 2]), labels = i, font = 2)
}
for (i in levels(clustering)) {
# Calculate the center coordinates for the white sphere
x_center <- mean(dimred[clustering == i, 1])
y_center <- mean(dimred[clustering == i, 2])
# Draw a white circle (sphere) before inserting the text
points(x_center, y_center, pch = 21, col = "white", cex = 2)
# Insert the text label
text(x_center, y_center, labels = i, font = 2)
}
for (i in levels(clustering)) {
# Calculate the center coordinates for the white sphere
x_center <- mean(dimred[clustering == i, 1])
y_center <- mean(dimred[clustering == i, 2])
# Draw a white circle (sphere) that is full and larger
points(x_center, y_center, pch = 19, col = "white", cex = 3)  # Use pch = 19 and adjust cex as needed
# Insert the text label
text(x_center, y_center, labels = i, font = 2)
}
for (i in levels(clustering)) {
# Calculate the center coordinates for the white sphere
x_center <- mean(dimred[clustering == i, 1])
y_center <- mean(dimred[clustering == i, 2])
# Draw a white circle (sphere) that is full and larger
points(x_center, y_center, pch = 19, col = "red", cex = 3)  # Use pch = 19 and adjust cex as needed
# Insert the text label
text(x_center, y_center, labels = i, font = 2)
}
gc()
library(Seurat)
library(tidyverse)
library(dplyr)
library(monocle3)
library(scran)
library(scater)
library(igraph)
library(cowplot)
library(slingshot)
library(tradeSeq)
library(uwot)
library(mclust)
library(RColorBrewer)
library(pheatmap)
print(getwd())
setwd('/Users/oliver/Documents/Random/RandomScience/1')
names(dataList)
# Load and process the pre-treatment data
dataList <- Read10X(data.dir = "./SC3_v3_NextGem_DI_CellPlex_CRISPR_A549_30K_A549_Small_Pool_v2_No_Treatment_count_sample_feature_bc_matrix/sample_feature_bc_matrix/")
#setwd('/Users/oliver/Documents/Random/RandomScience/1')
setwd('E:/RandomScience/1')
# Load and process the pre-treatment data
dataList <- Read10X(data.dir = "./SC3_v3_NextGem_DI_CellPlex_CRISPR_A549_30K_A549_Small_Pool_v2_No_Treatment_count_sample_feature_bc_matrix/sample_feature_bc_matrix/")
names(dataList)
data <- dataList$"Gene Expression"
data <- CreateSeuratObject(counts = data, project="Pre_Treatment2")
data <- NormalizeData(data)
data <- FindVariableFeatures(data)
data <- ScaleData(data)
data <- RunPCA(data)
data <- RunUMAP(data, dims = 1:20)
data <- FindNeighbors(data, dims = 1:20)
data <- FindClusters(data, resolution = 1)
data <- RunUMAP(data, n.neighbors = 10, dims = 1:50, spread = 2, min.dist = 0.3)
DimPlot(data, group.by = "RNA_snn_res.1")
gc()
library(Seurat)
library(SingleCellExperiment)
library(slingshot)
library(scran)
#setwd('/Users/oliver/Documents/Random/RandomScience/1')
setwd('E:/RandomScience/1')
# Step 1: Load data and create a Seurat object
dataList <- Read10X(data.dir = "./SC3_v3_NextGem_DI_CellPlex_CRISPR_A549_30K_A549_Small_Pool_v2_No_Treatment_count_sample_feature_bc_matrix/sample_feature_bc_matrix/")
names(dataList)
data <- dataList$"Gene Expression"
seurat_object <- CreateSeuratObject(counts = data, project="Pre_Treatment2")
# Step 2: Normalize and identify clusters using Seurat
seurat_object <- NormalizeData(seurat_object)
seurat_object <- FindVariableFeatures(seurat_object)
seurat_object <- ScaleData(seurat_object)
seurat_object <- RunPCA(seurat_object, features = VariableFeatures(object = seurat_object))
seurat_object <- FindNeighbors(seurat_object, dims = 1:20)
seurat_object <- FindClusters(seurat_object)
# Step 3: Convert to SingleCellExperiment object
sce_object <- as.SingleCellExperiment(seurat_object)
# Step 4: Run Slingshot
# Ensure you have a reducedDims entry in your sce_object, here we assume PCA has been stored
# You might need to set the reducedDims(sce_object) from the Seurat object PCA results
# Also, make sure `seurat_clusters` is the name of the cluster column in sce_object colData
sce_object <- slingshot(sce_object, clusterLabels = "seurat_clusters", reducedDim = 'PCA')
# The fitGAM function is part of the tradeSeq package and is used for fitting Generalized Additive Models
# It is not part of the Seurat or Slingshot workflow and requires additional context to be properly integrated
# Assuming you have already installed tradeSeq and have lineages identified, you could proceed
library(tradeSeq)
sce_object <- fitGAM(counts = counts(sce_object), sds = sce_object, pseudotime = slingPseudotime(sce_object, na = FALSE), cellWeights = slingCurveWeights(sce_object))
View(seurat_object)
View(seurat_object)
View(seurat_object)
# Step 4: Run Slingshot
# Ensure you have a reducedDims entry in your sce_object, here we assume PCA has been stored
# You might need to set the reducedDims(sce_object) from the Seurat object PCA results
# Also, make sure `seurat_clusters` is the name of the cluster column in sce_object colData
slingshot_object <- slingshot(sce_object, clusterLabels = "seurat_clusters", reducedDim = 'PCA')
# The fitGAM function is part of the tradeSeq package and is used for fitting Generalized Additive Models
# It is not part of the Seurat or Slingshot workflow and requires additional context to be properly integrated
# Assuming you have already installed tradeSeq and have lineages identified, you could proceed
library(tradeSeq)
sce_object <- fitGAM(counts = counts(sce_object), sds = slingshot_object, pseudotime = slingPseudotime(sce_object, na = FALSE), cellWeights = slingCurveWeights(sce_object))
sce_object <- fitGAM(sce_object)
sce_object <- fitGAM(sce_object)
sce_object <- fitGAM(sce_object)
